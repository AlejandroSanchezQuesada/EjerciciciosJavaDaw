
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author alexk
 */
public class principal extends javax.swing.JFrame {

    ArrayList<Pelota> ListaPelotas = new ArrayList();
    Timer timer;
    int velocidad = 800;

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        bMasEstrellas = new javax.swing.JButton();
        bMenosEstrellas = new javax.swing.JButton();
        bMasVelocidad = new javax.swing.JButton();
        bMenosVelocidad = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        bSalir = new javax.swing.JButton();
        bAbrir = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bPlay = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );

        bMasEstrellas.setText("+ Estrellas");
        bMasEstrellas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMasEstrellasActionPerformed(evt);
            }
        });

        bMenosEstrellas.setText("- Estrellas");
        bMenosEstrellas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMenosEstrellasActionPerformed(evt);
            }
        });

        bMasVelocidad.setText("+ Velocidad");
        bMasVelocidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMasVelocidadActionPerformed(evt);
            }
        });

        bMenosVelocidad.setText("- Velocidad");
        bMenosVelocidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMenosVelocidadActionPerformed(evt);
            }
        });

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        bSalir.setText("Salir");
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });

        bAbrir.setText("Abrir");
        bAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbrirActionPerformed(evt);
            }
        });

        bGuardar.setText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/udyr.png"))); // NOI18N

        bPlay.setText("Play");
        bPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bMasVelocidad)
                    .addComponent(bMenosVelocidad))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(bMenosEstrellas)
                    .addComponent(bMasEstrellas))
                .addGap(40, 40, 40)
                .addComponent(bPlay)
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(bLimpiar))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bMasEstrellas)
                                .addComponent(bMasVelocidad)
                                .addComponent(bPlay))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bMenosEstrellas)
                                .addComponent(bMenosVelocidad)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bLimpiar)
                                .addComponent(bAbrir))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bSalir)
                                .addComponent(bGuardar))))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void MueveEstrella() throws InterruptedException {
        Graphics g = panel.getGraphics();
        super.paint(g);

        panel.getGraphics().clearRect(1, 1, panel.getWidth() - 2, panel.getHeight() - 2);
        for (int i = 0; i < ListaPelotas.size(); i++) {

            if (ListaPelotas.get(i).getX() + (ListaPelotas.get(i).getRadio() * 2) >= panel.getWidth()) {
                ListaPelotas.get(i).setMaxX(true);
            }
            if (ListaPelotas.get(i).getY() + (ListaPelotas.get(i).getRadio() * 2) >= panel.getHeight()) {
                ListaPelotas.get(i).setMaxY(true);
            }

            if (ListaPelotas.get(i).getX() <= 0) {
                ListaPelotas.get(i).setMaxX(false);
            }

            if (ListaPelotas.get(i).getY() <= 0) {
                ListaPelotas.get(i).setMaxY(false);
            }

            if (ListaPelotas.get(i).isMaxX() == false) {
                ListaPelotas.get(i).setX(ListaPelotas.get(i).getX() + (1 * ListaPelotas.get(i).getVelocidadBola()));
            }
            if (ListaPelotas.get(i).isMaxY() == false) {
                ListaPelotas.get(i).setY(ListaPelotas.get(i).getY() + (1 * ListaPelotas.get(i).getVelocidadBola()));
            }

            if (ListaPelotas.get(i).isMaxX() == true) {
                ListaPelotas.get(i).setX(ListaPelotas.get(i).getX() - (1 * ListaPelotas.get(i).getVelocidadBola()));
            }
            if (ListaPelotas.get(i).isMaxY() == true) {
                ListaPelotas.get(i).setY(ListaPelotas.get(i).getY() - (1 * ListaPelotas.get(i).getVelocidadBola()));
            }

            g.setColor(ListaPelotas.get(i).getColor());
            g.fillOval(ListaPelotas.get(i).getX(), ListaPelotas.get(i).getY(), ListaPelotas.get(i).getRadio() * 2, ListaPelotas.get(i).getRadio() * 2);

        }

    }

    public void activaTemporizador() {
        timer = new Timer(50, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    MueveEstrella();
                } catch (InterruptedException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        timer.start();

    }

    private Color seleccionarColor() {
        int colorcito = (int) (Math.random() * 7) + 1;
        Color color = null;
        if (colorcito == 1) {
            color = Color.RED;
        } else if (colorcito == 2) {
            color = Color.BLUE;
        } else if (colorcito == 3) {
            color = Color.YELLOW;
        } else if (colorcito == 4) {
            color = Color.PINK;
        } else if (colorcito == 5) {
            color = Color.DARK_GRAY;
        } else if (colorcito == 6) {
            color = Color.GREEN;
        } else {
            color = Color.ORANGE;
        }

        return color;
    }


    private void bMasEstrellasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMasEstrellasActionPerformed

        int longitudMaxima = (int) (Math.random() * panel.getWidth()) + 1;
        int alturaMaxima = (int) (Math.random() * panel.getHeight()) + 1;
        int radio = (int) (Math.random() * 100) + 1;

        Pelota p = new Pelota(longitudMaxima, alturaMaxima, radio, seleccionarColor(), 1);
        ListaPelotas.add(p);


    }//GEN-LAST:event_bMasEstrellasActionPerformed

    private void bMenosEstrellasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenosEstrellasActionPerformed
        if (ListaPelotas.size() > 0) {
            ListaPelotas.remove(ListaPelotas.size() - 1);
        } else {

            JOptionPane.showMessageDialog(this, "NO HAY MAS ESTRELLAS!");
        }


    }//GEN-LAST:event_bMenosEstrellasActionPerformed

    private void bMasVelocidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMasVelocidadActionPerformed
        for (int i = 0; i < ListaPelotas.size(); i++) {
            ListaPelotas.get(i).setVelocidadBola(ListaPelotas.get(i).getVelocidadBola() + 1);
        }

    }//GEN-LAST:event_bMasVelocidadActionPerformed

    private void bMenosVelocidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenosVelocidadActionPerformed

        for (int i = 0; i < ListaPelotas.size(); i++) {
            if (ListaPelotas.get(i).getVelocidadBola() <= 0) {

            } else {
                ListaPelotas.get(i).setVelocidadBola(ListaPelotas.get(i).getVelocidadBola() - 1);
            }

        }

    }//GEN-LAST:event_bMenosVelocidadActionPerformed

    private void bPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlayActionPerformed
        activaTemporizador();
    }//GEN-LAST:event_bPlayActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed

        Object[] opciones = {"Guardar en Texto", "Guardar en Binario"};
        int eleccion = JOptionPane.showOptionDialog(this,
                "Seleccione Opcion para guardar",
                "Guardando Archivo",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[1]);

        if (eleccion == 0) {
            FileWriter documento = null;
            BufferedWriter bw = null;

            try {
                documento = new FileWriter("Partida.txt");
                bw = new BufferedWriter(documento);

                for (int i = 0; i < ListaPelotas.size(); i++) {
                    bw.write(ListaPelotas.get(i).toString());
                    bw.newLine();
                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    // Nuevamente aprovechamos el finally para 
                    // asegurarnos que se cierra el fichero.
                    if (null != documento) {
                        bw.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }

            }
        } else {

            try {
                FileOutputStream fos = new FileOutputStream("Partida.bin");
                DataOutputStream dos = new DataOutputStream(fos);

                for (int i = 0; i < ListaPelotas.size(); i++) {
                    dos.writeUTF(ListaPelotas.get(i).toString());

                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_bGuardarActionPerformed

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed

        ListaPelotas.removeAll(ListaPelotas);


    }//GEN-LAST:event_bLimpiarActionPerformed

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_bSalirActionPerformed

    private void bAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbrirActionPerformed

        Object[] opciones = {"Cargar en Texto", "Cargar en Binario"};
        int eleccion = JOptionPane.showOptionDialog(this,
                "Seleccione Opcion para cargar",
                "Cargando Archivo",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[1]);
        if (eleccion == 0) {

            File documento = null;
            FileReader fr = null;
            BufferedReader br = null;

            try {
                documento = new File("Partida.txt");
                fr = new FileReader(documento);
                br = new BufferedReader(fr);

                String linea = "";

                while ((linea = br.readLine()) != null) {
                    String a[] = linea.split(" ");
                    for (int i = 0; i < a.length; i++) {
                        int x = Integer.parseInt(a[0]);
                        int y = Integer.parseInt(a[1]);
                        int radio = Integer.parseInt(a[2]);
                        Color color = seleccionarColor();
                        int velocidadBola = Integer.parseInt(a[4]);
                        boolean maxX = Boolean.parseBoolean(a[5]);
                        boolean maxY = Boolean.parseBoolean(a[6]);
                        Pelota p = new Pelota(x, y, radio, color, velocidadBola, maxX, maxY);
                        ListaPelotas.add(p);

                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {

                try {
                    if (null != fr) {
                        fr.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        } else {

            try {
                FileInputStream fis = new FileInputStream("Partida.bin");
                DataInputStream dis = new DataInputStream(fis);
                boolean fin = false;
                while (fin != true) {
                    try {
                        String linea = dis.readUTF();

                        String a[] = linea.split(" ");
                        for (int i = 0; i < a.length; i++) {
                            int x = Integer.parseInt(a[0]);
                            int y = Integer.parseInt(a[1]);
                            int radio = Integer.parseInt(a[2]);
                            Color color = seleccionarColor();
                            int velocidadBola = Integer.parseInt(a[4]);
                            boolean maxX = Boolean.parseBoolean(a[5]);
                            boolean maxY = Boolean.parseBoolean(a[6]);
                            Pelota p = new Pelota(x, y, radio, color, velocidadBola, maxX, maxY);
                            ListaPelotas.add(p);
                        }

                    } catch (EOFException e) {
                        fin = true;
                    }

    }//GEN-LAST:event_bAbrirActionPerformed

            } catch (IOException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAbrir;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bMasEstrellas;
    private javax.swing.JButton bMasVelocidad;
    private javax.swing.JButton bMenosEstrellas;
    private javax.swing.JButton bMenosVelocidad;
    private javax.swing.JButton bPlay;
    private javax.swing.JButton bSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
}
